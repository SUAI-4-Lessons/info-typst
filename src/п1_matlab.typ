



= Matlab

== Базовые управляющие конструкции структурного программирования и их реализация в MATLAB

Структурное программирование основывается на использовании трех базовых
управляющих конструкций: #strong[последовательность];,
#strong[ветвление] и #strong[цикл];. Рассмотрим их реализацию в MATLAB.



=== Последовательность
Последовательность представляет собой выполнение команд одна за другой.
В MATLAB это просто выполнение строк кода сверху вниз.

#strong[Пример];:

```matlab
a = 5;
b = 10;
c = a + b;
disp(c);
```

Здесь команды выполняются последовательно: объявление переменных,
вычисление суммы и вывод результата.




== Циклы в программировании. Приведите примеры организации циклов в MATLAB

==== Цикл for
```matlab
for i = 1:5
    disp(['Текущая итерация: ', num2str(i)]);
end
```

==== Цикл while
```matlab
x = 0;
while x < 5
    disp(['x равно ', num2str(x)]);
    x = x + 1;
end
```

==== Прерывание циклов
Для досрочного выхода из цикла используется `break`. Чтобы пропустить
текущую итерацию, используется `continue`.

Пример с break и continue:

```matlab
for i = 1:10
    if i == 5
        disp('Пропуск итерации 5');
        continue; % Пропускаем итерацию
    elseif i == 8
        disp('Прерываем цикл на 8');
        break; % Выходим из цикла
    end
    disp(['Итерация: ', num2str(i)]);
end
```


=== Вложенные конструкции
Все управляющие конструкции можно вкладывать друг в друга.

#strong[Пример];:

```matlab
for i = 1:3
    for j = 1:2
        if mod(i + j, 2) == 0
            disp(['Сумма ', num2str(i + j), ' четная']);
        else
            disp(['Сумма ', num2str(i + j), ' нечетная']);
        end
    end
end
```


== Ветвление в программировании. Приведите примеры организации ветвления в MATLAB

Ветвление используется для выполнения разных участков кода в зависимости
от условий. MATLAB поддерживает конструкции `if`, `else`, `elseif` и
`switch`.

==== Конструкция if
```matlab
x = 15;

if x > 10
    disp('x больше 10');
elseif x == 10
    disp('x равно 10');
else
    disp('x меньше 10');
end
```

==== Конструкция switch
```matlab
choice = 2;

switch choice
    case 1
        disp('Вы выбрали 1');
    case 2
        disp('Вы выбрали 2');
    otherwise
        disp('Неверный выбор');
end
```

== Функции ввода/вывода на экран (в консоль)  в MATLAB

=== #strong[Функции вывода]
<функции-вывода>
+ #strong[`disp`] \
  Простая функция для вывода текста или значений на экран.

  #strong[Пример];:

  ```matlab
  disp('Привет, MATLAB!');
  disp(42);
  A = [1, 2, 3];
  disp(A);
  ```

+ #strong[`fprintf`] \
  Позволяет выводить текст с форматированием.

  #strong[Пример];:

  ```matlab
  x = 3.14159;
  fprintf('Значение pi: %.2f\n', x);  % Вывод с 2 знаками после запятой
  ```

  Формат спецификаторов:

  - `%d` --- целое число.
  - `%f` --- число с плавающей точкой.
  - `%.nf` --- число с плавающей точкой с n знаками после запятой.
  - `%s` --- строка.
  - `\n` --- перевод строки.

  #strong[Пример вывода таблицы];:

  ```matlab
  fprintf('N\tSquare\tCube\n');
  for n = 1:5
      fprintf('%d\t%d\t%d\n', n, n^2, n^3);
  end
  ```

+ #strong[`disp` vs `fprintf`]

  - `disp` проще использовать, но не поддерживает форматирование.
  - `fprintf` предоставляет больше возможностей, особенно для вывода
    таблиц или чисел с форматированием.


=== Функции ввода
+ #strong[`input`] \
  Считывает данные, введенные пользователем.

  - Если ожидается число, вводят без кавычек. \
  - Если ожидается строка, вводят в кавычках или используют `'s'`.

  #strong[Пример (ввод числа)];:

  ```matlab
  x = input('Введите число: ');
  disp(['Вы ввели: ', num2str(x)]);
  ```

  #strong[Пример (ввод строки)];:

  ```matlab
  name = input('Введите ваше имя: ', 's');
  disp(['Привет, ', name, '!']);
  ```

+ #strong[`menu`] \
  Отображает диалоговое окно с выбором.

  #strong[Пример];:

  ```matlab
  choice = menu('Выберите действие', 'Сложение', 'Вычитание', 'Выход');
  switch choice
      case 1
          disp('Вы выбрали сложение.');
      case 2
          disp('Вы выбрали вычитание.');
      case 3
          disp('Выход из программы.');
  end
  ```


== Построение и форматирование графиков в MATLAB

=== #strong[\1. Построение простых графиков]
<построение-простых-графиков>
+ #strong[График функции (`plot`)]

  ```matlab
  x = 0:0.1:2*pi;  % Задаем диапазон значений
  y = sin(x);      % Вычисляем значения функции
  plot(x, y);      % Строим график
  title('График функции sin(x)');
  xlabel('x');
  ylabel('sin(x)');
  ```

  Здесь:

  - `title` --- заголовок графика.
  - `xlabel` и `ylabel` --- подписи осей.

+ #strong[Множественные графики на одном поле]

  ```matlab
  x = 0:0.1:2*pi;
  plot(x, sin(x), 'r', x, cos(x), 'b--');  % Синий пунктирный график и красный сплошной
  legend('sin(x)', 'cos(x)');  % Легенда
  grid on;                     % Включаем сетку
  ```


=== #strong[\2. Форматирование графиков]
<форматирование-графиков>
+ #strong[Цвета линий]

  - `'r'` --- красный.
  - `'g'` --- зеленый.
  - `'b'` --- синий.
  - `'k'` --- черный.
  - `'m'` --- пурпурный.

+ #strong[Типы линий]

  - `'-'` --- сплошная.
  - `'--'` --- пунктирная.
  - `':'` --- точечная.
  - `'-.'` --- точечно-пунктирная.

+ #strong[Маркеры]

  - `'o'` --- круг.
  - `'s'` --- квадрат.
  - `'*'` --- звезда.
  - `'x'` --- крест.

  #strong[Пример];:

  ```matlab
  x = 1:10;
  y = x.^2;
  plot(x, y, 'g--o', 'LineWidth', 2, 'MarkerSize', 8);  % Зеленая пунктирная линия с круглыми маркерами
  ```

+ #strong[Толщина линии] Используйте параметр `'LineWidth'`:

  ```matlab
  plot(x, y, 'r', 'LineWidth', 3);
  ```


=== #strong[\3. Построение нескольких графиков]
<построение-нескольких-графиков>
+ #strong[`subplot`] --- несколько графиков в одной фигуре.

  ```matlab
  x = 0:0.1:2*pi;
  subplot(2, 1, 1);  % 2 строки, 1 столбец, 1 график
  plot(x, sin(x));
  title('sin(x)');

  subplot(2, 1, 2);  % 2 строки, 1 столбец, 2 график
  plot(x, cos(x));
  title('cos(x)');
  ```

+ #strong[`hold on` и `hold off`] --- наложение графиков.

  ```matlab
  x = 0:0.1:2*pi;
  y1 = sin(x);
  y2 = cos(x);

  plot(x, y1, 'r');
  hold on;  % Разрешаем наложение
  plot(x, y2, 'b--');
  hold off; % Завершаем наложение
  legend('sin(x)', 'cos(x)');
  ```

== Функции в программировании. Фактические и формальные параметры функций.  Поясните синтаксис и приведите примеры функций в MATLAB

Функции в программировании позволяют повторно использовать код и
структурировать программу. Они принимают входные данные (параметры),
выполняют операции и возвращают результат. В MATLAB функции имеют
специфический синтаксис и поддерживают фактические и формальные
параметры.

=== #strong[Функции: основные понятия]
<функции-основные-понятия>
+ #strong[Фактические параметры] \
  Это реальные значения, передаваемые в функцию при ее вызове. Они
  определяют, с какими данными будет работать функция.

+ #strong[Формальные параметры] \
  Это переменные, указанные в заголовке функции, которые принимают
  значения фактических параметров внутри функции.


=== #strong[Синтаксис функции в MATLAB]
<синтаксис-функции-в-matlab>
Функции в MATLAB сохраняются в отдельных `.m`-файлах, где имя файла
должно совпадать с именем функции.

#strong[Общий вид функции:]

```matlab
function [output1, output2, ...] = functionName(input1, input2, ...)
    % Описание функции (необязательно)
    % Ваш код
end
```

- #strong[`function`] --- ключевое слово для объявления функции.
- #strong[`output1, output2, ...`] --- переменные, которые возвращает
  функция (может быть одна или несколько).
- #strong[`functionName`] --- имя функции (должно совпадать с именем
  файла).
- #strong[`input1, input2, ...`] --- входные параметры функции.


=== #strong[Примеры функций]
<примеры-функций>
==== #strong[\1. Простая функция без параметров]
<простая-функция-без-параметров>
Функция, возвращающая фиксированное значение:

```matlab
function result = greet()
    result = 'Привет, MATLAB!';
end
```

#strong[Вызов функции:]

```matlab
disp(greet());
```


==== #strong[\2. Функция с входными параметрами]
<функция-с-входными-параметрами>
Функция, вычисляющая площадь круга:

```matlab
function area = circleArea(radius)
    area = pi * radius^2;
end
```

#strong[Вызов функции:]

```matlab
r = 5;
disp(['Площадь круга с радиусом ', num2str(r), ': ', num2str(circleArea(r))]);
```

- `radius` --- формальный параметр.
- Значение `5` --- фактический параметр.


==== #strong[\3. Функция с несколькими выходными параметрами]
<функция-с-несколькими-выходными-параметрами>
Функция, вычисляющая сумму и разность двух чисел:

```matlab
function [sumValue, diffValue] = calculate(a, b)
    sumValue = a + b;
    diffValue = a - b;
end
```

#strong[Вызов функции:]

```matlab
[sumRes, diffRes] = calculate(10, 3);
disp(['Сумма: ', num2str(sumRes)]);
disp(['Разность: ', num2str(diffRes)]);
```


==== #strong[\4. Функция с несколькими входными параметрами]
<функция-с-несколькими-входными-параметрами>
Функция, вычисляющая объем цилиндра:

```matlab
function volume = cylinderVolume(radius, height)
    volume = pi * radius^2 * height;
end
```

#strong[Вызов функции:]

```matlab
r = 3;
h = 10;
disp(['Объем цилиндра: ', num2str(cylinderVolume(r, h))]);
```



=== #strong[Вложенные и анонимные функции]
<вложенные-и-анонимные-функции>
==== #strong[\1. Вложенные функции]
<вложенные-функции>
Функции, объявленные внутри другой функции.

```matlab
function result = outerFunction(x)
    result = innerFunction(x) + 5;

    function y = innerFunction(x)
        y = x^2;
    end
end
```

#strong[Вызов:]

```matlab
disp(outerFunction(3));  % Результат: 14
```

==== #strong[\2. Анонимные функции]
<анонимные-функции>
Однострочные функции, которые можно определить и вызвать без отдельного
файла:

```matlab
square = @(x) x^2;
disp(square(4));  % Результат: 16
```


=== #strong[Передача параметров]
<передача-параметров>
+ #strong[Передача по значению] \
  MATLAB передает параметры по значению. Это значит, что изменение
  параметра внутри функции не влияет на оригинальное значение
  переменной.

+ #strong[Передача массивов и структур] \
  Для массивов и структур MATLAB также передает копию, но изменения
  внутри функции могут повлиять на переданный объект, если вы работаете
  с конкретными полями или элементами.

#strong[Пример с массивом:]

```matlab
function modifyArray(arr)
    arr(1) = 999;
    disp(['Внутри функции: ', num2str(arr)]);
end

A = [1, 2, 3];
modifyArray(A);
disp(['Оригинальный массив: ', num2str(A)]);  % Не изменится
```


=== #strong[Рекурсивные функции]
<рекурсивные-функции>
Функции, которые вызывают сами себя.

#strong[Пример: факториал числа]

```matlab
function result = factorialRecursive(n)
    if n == 0
        result = 1;
    else
        result = n * factorialRecursive(n - 1);
    end
end
```

#strong[Вызов:]

```matlab
disp(factorialRecursive(5));  % Результат: 120
```

== Дайте определение и сравнительную характеристику скриптам, функциям и анонимным функциям в MATLAB

=== #strong[\1. Определения]
<определения>
+ #strong[Скрипты]

  - Это последовательность команд MATLAB, которые хранятся в `.m`-файле.
    \
  - Скрипт #strong[не принимает входные параметры и не возвращает
    выходные значения];. \
  - Работает в контексте #strong[рабочей области (workspace)] MATLAB и
    может изменять переменные в ней.

  #strong[Пример:]

  ```matlab
  % script.m
  x = 5;
  y = x^2;
  disp(['Квадрат числа x: ', num2str(y)]);
  ```

+ #strong[Функции]

  - Это отдельные модули кода, которые принимают #strong[входные
    параметры];, выполняют операции и возвращают #strong[выходные
    значения];. \
  - Имеют собственную область видимости, изолированную от рабочего
    пространства. \
  - Хранятся в `.m`-файлах, где имя файла совпадает с именем функции.

  #strong[Пример:]

  ```matlab
  function y = square(x)
      y = x^2;
  end
  ```

+ #strong[Анонимные функции]

  - Это компактные однострочные функции, создаваемые без отдельного
    файла. \
  - Поддерживают передачу входных параметров, но могут возвращать только
    одно значение. \
  - Определяются с помощью символа `@`.

  #strong[Пример:]

  ```matlab
  square = @(x) x^2;
  disp(square(5));  % Результат: 25
  ```


=== #strong[\2. Сравнительная характеристика]
<сравнительная-характеристика>
#figure(
  align(center)[#table(
    columns: (16.86%, 27.33%, 27.91%, 27.91%),
    align: (auto,auto,auto,auto,),
    table.header([#strong[Характеристика];], [#strong[Скрипты];], [#strong[Функции];], [#strong[Анонимные
      функции];],),
    table.hline(),
    [#strong[Формат хранения];], [`.m`-файл], [`.m`-файл], [В
    переменной, без отдельного файла],
    [#strong[Входные параметры];], [Не
    поддерживаются], [Поддерживаются], [Поддерживаются],
    [#strong[Выходные значения];], [Не
    возвращаются], [Возвращаются], [Возвращается одно значение],
    [#strong[Область видимости];], [Работает в рабочей
    области], [Изолирована от рабочей области], [Изолирована от рабочей
    области],
    [#strong[Сложность логики];], [Подходит для простых
    последовательностей], [Подходит для сложных вычислений и
    модулей], [Только для простых однострочных вычислений],
    [#strong[Многократное использование];], [Ограничено, требует
    копирования кода], [Легко переиспользуется], [Легко
    переиспользуется],
    [#strong[Поддержка вложенности];], [Не поддерживает], [Поддерживает
    вложенные функции], [Не поддерживает],
    [#strong[Пример применения];], [Инициализация переменных,
    тестирование], [Вычисление площади фигуры, алгоритмы], [Однострочные
    вычисления, обратные вызовы],
  )]
  , kind: table
  )


=== #strong[\3. Примеры использования]
<примеры-использования>
==== #strong[Скрипт]
<скрипт>
Используется для выполнения простых задач, тестирования или
инициализации переменных.

```matlab
% example_script.m
x = 10;
y = x^2 + 5;
disp(['Результат: ', num2str(y)]);
```

==== #strong[Функция]
<функция>
Подходит для многократного использования и изолированной обработки
данных.

```matlab
% example_function.m
function result = calculateSquare(x)
    result = x^2;
end
```

#strong[Вызов:]

```matlab
disp(calculateSquare(4));  % Результат: 16
```

==== #strong[Анонимная функция]
<анонимная-функция>
Идеальна для кратких операций и простых вычислений.

```matlab
square = @(x) x^2;
disp(square(4));  % Результат: 16
```


=== #strong[\4. Когда использовать что?]
<когда-использовать-что>
+ #strong[Скрипты]
  - Для простых, одноразовых задач, подготовки данных или тестирования
    кода. \
  - Не подходят для сложных программ, требующих изоляции переменных.
+ #strong[Функции]
  - Для модульного программирования, повторного использования кода и
    реализации сложной логики. \
  - Подходят для задач, где нужно передавать параметры и возвращать
    результат.
+ #strong[Анонимные функции]
  - Для простых вычислений, создания кратких функций внутри скриптов или
    функций. \
  - Удобны в качестве обратных вызовов для обработки массивов или
    графиков.

